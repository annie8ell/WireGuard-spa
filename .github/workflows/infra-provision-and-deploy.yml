name: Provision Infrastructure and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Azure Resource Group name'
        required: true
        default: 'wireguard-spa-rg'
      location:
        description: 'Azure region for resources'
        required: true
        default: 'westeurope'
      projectName:
        description: 'Project name prefix (lowercase, no spaces)'
        required: true
        default: 'wgspa'

env:
  RESOURCE_GROUP: ${{ github.event.inputs.resourceGroupName || 'wireguard-spa-rg' }}
  LOCATION: ${{ github.event.inputs.location || 'westeurope' }}
  PROJECT_NAME: ${{ github.event.inputs.projectName || 'wgspa' }}

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    # Protect main with environment (configure reviews/approvals in Settings > Environments > production)
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Optional: replace creds usage with federated credentials (OIDC) for better security.
        # For OIDC, create a federated credential in Azure AD and remove creds usage.

      - name: Install jq & unzip
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Bicep build (syntax/compile check)
        run: |
          set -euo pipefail
          az bicep install --no-progress || true
          az bicep build --file infra/main.bicep --outdir /tmp/bicep-built

      - name: Check or Create Resource Group and Validate Location
        id: check-rg
        run: |
          set -euo pipefail
          RG="${{ env.RESOURCE_GROUP }}"
          LOCATION="${{ env.LOCATION }}"

          echo "Checking whether resource group '$RG' exists..."
          EXISTS=$(az group exists --name "$RG" || true)

          if [ "$EXISTS" = "false" ]; then
            echo "Resource group '$RG' does not exist. Creating in location '$LOCATION'..."
            az group create --name "$RG" --location "$LOCATION"
          else
            CURRENT_LOC=$(az group show --name "$RG" --query location -o tsv || true)
            if [ -z "$CURRENT_LOC" ]; then
              echo "ERROR: Unable to determine existing resource group's location for '$RG'." >&2
              exit 1
            fi

            if [ "$(echo "$CURRENT_LOC" | tr '[:upper:]' '[:lower:]')" != "$(echo "$LOCATION" | tr '[:upper:]' '[:lower:]')" ]; then
              echo "ERROR: Resource group '$RG' already exists in location '$CURRENT_LOC' but workflow requested '$LOCATION'." >&2
              exit 1
            fi

            echo "Resource group '$RG' exists in the requested location '$LOCATION'. Continuing."
          fi

      - name: Deployment What-If / Preview (validate changes)
        id: whatif
        run: |
          set -euo pipefail
          RG="${{ env.RESOURCE_GROUP }}"
          PROJECT="${{ env.PROJECT_NAME }}"
          LOCATION="${{ env.LOCATION }}"

          echo "Running az deployment group what-if to preview changes..."
          az deployment group what-if \
            --resource-group "$RG" \
            --template-file infra/main.bicep \
            --parameters projectName="$PROJECT" location="$LOCATION" \
            -o json > whatif.json || true

          echo "What-if output:"
          jq -C . whatif.json || true
          # Persist result to job summary
          echo "What-if preview saved to whatif.json"

      - name: Deploy Bicep Infrastructure (apply)
        id: deploy-infra
        if: >
          github.event_name == 'workflow_dispatch' ||
          github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          OUTPUT=$(az deployment group create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --template-file infra/main.bicep \
            --parameters projectName=${{ env.PROJECT_NAME }} location=${{ env.LOCATION }} \
            --query 'properties.outputs' -o json)

          echo "Deployment outputs: $OUTPUT"

          FUNCTION_APP_NAME=$(echo "$OUTPUT" | jq -r '.functionAppName.value // empty')
          SWA_NAME=$(echo "$OUTPUT" | jq -r '.staticWebAppName.value // empty')
          SWA_RESOURCE_ID=$(echo "$OUTPUT" | jq -r '.staticWebAppResourceId.value // empty')

          if [ -z "$FUNCTION_APP_NAME" ] || [ -z "$SWA_NAME" ]; then
            echo "ERROR: Expected deployment outputs not found. Check infra/main.bicep outputs." >&2
            exit 1
          fi

          echo "functionAppName=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "staticWebAppName=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "staticWebAppResourceId=$SWA_RESOURCE_ID" >> $GITHUB_OUTPUT

      - name: Retrieve SWA Deployment Token
        id: swa-token
        if: steps.deploy-infra.outcome == 'success'
        run: |
          set -euo pipefail
          SWA_NAME="${{ steps.deploy-infra.outputs.staticWebAppName }}"
          SWA_TOKEN=$(az staticwebapp secrets list \
            --name "$SWA_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query 'properties.apiKey' -o tsv)
          echo "::add-mask::$SWA_TOKEN"
          echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT

      - name: Build and Deploy App + Configure (unchanged)
        if: steps.deploy-infra.outcome == 'success'
        run: |
          # (keeps your current app build/deploy steps - omitted here for brevity)
          echo "Deploy steps would run here (functions zip, SWA deploy, config)..."
