name: Provision Infrastructure and Deploy

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Azure Resource Group name'
        required: true
        default: 'wireguard-spa-rg'
      location:
        description: 'Azure region for resources'
        required: true
        default: 'westeurope'
      projectName:
        description: 'Project name prefix (lowercase, no spaces)'
        required: true
        default: 'wgspa'

env:
  RESOURCE_GROUP: ${{ github.event.inputs.resourceGroupName || 'wireguard-spa-rg' }}
  LOCATION: ${{ github.event.inputs.location || 'westeurope' }}
  PROJECT_NAME: ${{ github.event.inputs.projectName || 'wgspa' }}

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check or Create Resource Group and Validate Location
        id: check-rg
        run: |
          set -euo pipefail
          RG="${{ env.RESOURCE_GROUP }}"
          LOCATION="${{ env.LOCATION }}"

          echo "Checking whether resource group '$RG' exists..."
          EXISTS=$(az group exists --name "$RG" || true)

          if [ "$EXISTS" = "false" ]; then
            echo "Resource group '$RG' does not exist. Creating in location '$LOCATION'..."
            az group create --name "$RG" --location "$LOCATION"
          else
            CURRENT_LOC=$(az group show --name "$RG" --query location -o tsv || true)
            if [ -z "$CURRENT_LOC" ]; then
              echo "ERROR: Unable to determine existing resource group's location for '$RG'." >&2
              exit 1
            fi

            # Normalize to lowercase for comparison
            if [ "$(echo "$CURRENT_LOC" | tr '[:upper:]' '[:lower:]')" != "$(echo "$LOCATION" | tr '[:upper:]' '[:lower:]')" ]; then
              echo "ERROR: Resource group '$RG' already exists in location '$CURRENT_LOC' but workflow requested '$LOCATION'." >&2
              echo "To continue, either choose the matching location or use a different resource group name." >&2
              exit 1
            fi

            echo "Resource group '$RG' exists in the requested location '$LOCATION'. Continuing."
          fi

      - name: Check Azure Service Principal Permissions
        id: check-permissions
        run: |
          set -euo pipefail
          RG="${{ env.RESOURCE_GROUP }}"
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          SP_OBJECT_ID=$(az ad signed-in-user show --query id -o tsv 2>/dev/null || echo "")
          
          echo "### Azure Service Principal Permission Check ###"
          echo ""
          echo "Subscription ID: $SUBSCRIPTION_ID"
          echo "Resource Group: $RG"
          
          if [ -n "$SP_OBJECT_ID" ]; then
            echo "Service Principal Object ID: $SP_OBJECT_ID"
          else
            echo "Note: Running as service principal (object ID not available via signed-in-user)"
          fi
          echo ""
          
          # Check role assignments at resource group level
          echo "Checking role assignments at Resource Group scope..."
          RG_ROLES=$(az role assignment list --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG" --query "[].{Role:roleDefinitionName, Scope:scope}" -o json 2>/dev/null || echo "[]")
          echo "Resource Group Roles: $RG_ROLES"
          echo ""
          
          # Check if we can create role assignments
          echo "Testing permission: Microsoft.Authorization/roleAssignments/write"
          CAN_ASSIGN_ROLES=$(az provider show --namespace Microsoft.Authorization --query "resourceTypes[?resourceType=='roleAssignments'].permissions[0].allowedPermissions" -o tsv 2>/dev/null || echo "unknown")
          
          # Check actual permissions via what-if deployment
          echo ""
          echo "Testing deployment permissions with what-if analysis..."
          WHAT_IF_RESULT=$(az deployment group what-if \
            --resource-group "$RG" \
            --template-file infra/main.bicep \
            --parameters projectName=${{ env.PROJECT_NAME }} location=${{ env.LOCATION }} \
            --no-pretty-print 2>&1 || true)
          
          echo "$WHAT_IF_RESULT"
          echo ""
          
          # Check for authorization errors in what-if
          if echo "$WHAT_IF_RESULT" | grep -qi "Microsoft.Authorization/roleAssignments/write"; then
            echo "❌ ERROR: Service principal lacks permission to create role assignments"
            echo ""
            echo "### Required Permissions ###"
            echo "The service principal needs one of the following roles at the Resource Group or Subscription level:"
            echo "  - Owner"
            echo "  - User Access Administrator (in addition to Contributor)"
            echo ""
            echo "Current Bicep template requires creating role assignments for:"
            echo "  - Virtual Machine Contributor role for Function App managed identity"
            echo "  - Network Contributor role for Function App managed identity"
            echo ""
            echo "### How to Fix ###"
            echo "Option 1: Grant 'User Access Administrator' role to the service principal"
            echo "  az role assignment create --assignee <service-principal-id> --role 'User Access Administrator' --scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG"
            echo ""
            echo "Option 2: Grant 'Owner' role to the service principal"  
            echo "  az role assignment create --assignee <service-principal-id> --role 'Owner' --scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG"
            echo ""
            echo "Note: This check will not fail the workflow, but the deployment step will fail without proper permissions."
          else
            echo "✅ Service principal appears to have necessary permissions"
          fi

      - name: Deploy Bicep Infrastructure (assumes RG exists)
        id: deploy-infra
        run: |
          set -euo pipefail
          # Bicep templates should not create the resource group (deploy into existing RG)
          
          echo "Deploying Bicep infrastructure..."
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --template-file infra/main.bicep \
            --parameters projectName=${{ env.PROJECT_NAME }} location=${{ env.LOCATION }} \
            --query 'properties.outputs' -o json 2>&1) || {
            DEPLOY_EXIT_CODE=$?
            echo "Deployment failed with exit code: $DEPLOY_EXIT_CODE"
            echo "$DEPLOYMENT_OUTPUT"
            
            # Check for authorization error
            if echo "$DEPLOYMENT_OUTPUT" | grep -qi "Microsoft.Authorization/roleAssignments/write"; then
              echo ""
              echo "❌ AUTHORIZATION ERROR DETECTED"
              echo ""
              echo "The deployment failed because the service principal does not have permission to create role assignments."
              echo ""
              echo "### Required Action ###"
              echo "Grant the service principal 'User Access Administrator' or 'Owner' role at the Resource Group or Subscription level."
              echo ""
              echo "Commands to fix:"
              echo "1. Get the service principal's application ID from your AZURE_CREDENTIALS secret"
              echo "2. Run one of these commands:"
              echo ""
              echo "   # Option 1: User Access Administrator (minimum required)"
              echo "   az role assignment create --assignee <sp-app-id> --role 'User Access Administrator' --resource-group ${{ env.RESOURCE_GROUP }}"
              echo ""
              echo "   # Option 2: Owner (full access)"
              echo "   az role assignment create --assignee <sp-app-id> --role 'Owner' --resource-group ${{ env.RESOURCE_GROUP }}"
              echo ""
              echo "See the 'Check Azure Service Principal Permissions' step above for more details."
            fi
            
            exit $DEPLOY_EXIT_CODE
          }

          OUTPUT="$DEPLOYMENT_OUTPUT"
          echo "Deployment outputs: $OUTPUT"

          FUNCTION_APP_NAME=$(echo "$OUTPUT" | jq -r '.functionAppName.value // empty')
          SWA_NAME=$(echo "$OUTPUT" | jq -r '.staticWebAppName.value // empty')
          SWA_RESOURCE_ID=$(echo "$OUTPUT" | jq -r '.staticWebAppResourceId.value // empty')

          if [ -z "$FUNCTION_APP_NAME" ] || [ -z "$SWA_NAME" ]; then
            echo "ERROR: Expected deployment outputs not found. Check infra/main.bicep outputs." >&2
            exit 1
          fi

          echo "functionAppName=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "staticWebAppName=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "staticWebAppResourceId=$SWA_RESOURCE_ID" >> $GITHUB_OUTPUT

      - name: Retrieve SWA Deployment Token
        id: swa-token
        run: |
          set -euo pipefail
          SWA_NAME="${{ steps.deploy-infra.outputs.staticWebAppName }}"
          if [ -z "$SWA_NAME" ]; then
            echo "ERROR: Static Web App name missing from previous step outputs." >&2
            exit 1
          fi
          SWA_TOKEN=$(az staticwebapp secrets list \
            --name "$SWA_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query 'properties.apiKey' -o tsv)
          echo "::add-mask::$SWA_TOKEN"
          echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Backend Dependencies and Create Zip
        run: |
          set -euo pipefail
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target .python_packages/lib/site-packages
          zip -r ../backend.zip . -x "*.pyc" "__pycache__/*" "venv/*" ".venv/*" "*/.git/*"

      - name: Deploy Azure Functions via Zip Deploy
        run: |
          set -euo pipefail
          az functionapp deployment source config-zip \
            -g "${{ env.RESOURCE_GROUP }}" \
            -n "${{ steps.deploy-infra.outputs.functionAppName }}" \
            --src backend.zip

      - name: Configure Function App Settings
        run: |
          set -euo pipefail
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          az functionapp config appsettings set \
            --name "${{ steps.deploy-infra.outputs.functionAppName }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings \
              ALLOWED_EMAILS="awwsawws@gmail.com,awwsawws@hotmail.com" \
              DRY_RUN="true" \
              ADMIN_USERNAME="azureuser" \
              AZURE_SUBSCRIPTION_ID="$SUBSCRIPTION_ID" \
              AZURE_RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"

      - name: Build and Deploy Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/' 
          skip_app_build: true
          output_location: '/'

      - name: Deployment Summary
        run: |
          echo "### Deployment Complete! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "**Location:** ${{ env.LOCATION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function App:** ${{ steps.deploy-infra.outputs.functionAppName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Static Web App:** ${{ steps.deploy-infra.outputs.staticWebAppName }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify SWA Backends linking in Azure Portal:" >> $GITHUB_STEP_SUMMARY
          echo "   - Navigate to Static Web App → APIs/Backends blade" >> $GITHUB_STEP_SUMMARY
          echo "   - Link Function App as backend API with path /api" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure authentication providers in SWA (Google/Microsoft)" >> $GITHUB_STEP_SUMMARY
          echo "3. Test deployment with DRY_RUN=true (currently set)" >> $GITHUB_STEP_SUMMARY
          echo "4. When ready, set DRY_RUN=false to enable actual VM provisioning" >> $GITHUB_STEP_SUMMARY
